{"/":{"title":"ðŸª´ Aaron's Garden","content":"Hi welcome to my second brain :P\n\nRecent snippets of knowledge:\n- [[notes/Technical Diagrams|Technical Diagrams]]\n- [[notes/Authentication System Design Notes|Authentication System Design Notes]]\n- [[notes/first 2brain note|first 2brain note]]","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]},"/Class-Digram":{"title":"Class Digram","content":"","lastmodified":"2023-12-30T03:26:37.051942828Z","tags":[]},"/Scheduling":{"title":"Scheduling","content":"**Scheduling removes ambiguity**\n\n# Suggestions\n1. Schedule most important tasks for the hours in which you have the most energy\n\t- Typically late morning \n2. \n\n\n\n","lastmodified":"2023-12-30T03:26:37.051942828Z","tags":["productivity"]},"/notes/Authentication-System-Design-Notes":{"title":"Authentication System Design Notes","content":"\nKey Features:\n- Users Register\n- Users login\n- Users sign-out\n\nTo consider:\n- Security\n- User count\n\n## Initial Problem:\nHTTP is stateless, but login is stateful (not having to login on every request). Key question is how do we make HTTP requests stateful?\n\nWe can add user field to requests to represent which user is interacting with API\n**POST /login**\n{ user: \"bob\", pass: \"lol\"}\n\nNow how the problem arises of how can we differentiate between requests from bad actors that claim that they are {user: \"bob\"} \n### Identifying State\nSession Token are hashed strings used to identify who is interacting with the server. The tokens are generated on login and stored server side on a key value table of users : session token. \n\nExample:\n\nUser      |  Session\n---- | ----\nBob       |   xifsop9\nAlice       |   few8nce\nBob       |   ewijpw0\n\n## Storing Sessions\nNow that we have session tokens generated, we need to figure out how can we store them on the client.\n\nTwo types: **Cookie Based** or **Local Storage**\n##### Cookie Based\nSecurity Flaws:\n- [XSS]\n- [CSRF]\n\n##### Local Storage\nNeed users to make deliberate requests\n\n\n## Architectural Considerations\nSession tokens **require** a DB hit.\nConcerns:\n- DoS attack\n- DB scale\n\n**Typically the solution is to decentralize**\n\n![[Screenshot 2023-12-27 at 1.23.43 PM.png]]\nan idea is to use JSON Web Tokens (JWTs)\n## JSON Web Tokens (JWTs)\nJWTs are structured as {header, payload, signature} where:\n- header -\u003e algorithm  + type of token (JWT)\n- payload -\u003e app data (user data)\n- signature -\u003e algorithm(header + data, secret)\nThe signature is use the algorithm to verify the data.\n\n![[Screenshot 2023-12-27 at 1.29.48 PM.png]]\nConsiderations:\n- Uses JWT to verify identity, doesn't have a central state of truth as with the sessions table.\n\n\n\n","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]},"/notes/Technical-Diagrams":{"title":"Technical Diagrams","content":"\n# UML Diagrams\nStands for **U**nified **M**odeling **L**anguage. Used to model software solutions, application structures, system behavior and business processes.\n\n### UML Diagram Types\n#### Structure Diagrams:\n- [[notes/Technical Diagrams#Class Diagram|Class Diagram]]\n#### Behavioral Diagrams:\n- [[notes/Technical Diagrams#Activity Diagram|Activity Diagram]]\n- [[#Sequence Diagram]]\n\n### Class Diagram\nUsed to represent a collection of classes.\n\n**Structure:**\n- box:\n\t- name of class\n\t- attributes of class\n\t- methods of class\n- arrows: relationship between classes\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/KP-UML-Generalization-20060325.svg/300px-KP-UML-Generalization-20060325.svg.png)\n\n**Relationship notations**\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Uml_classes_en.svg/300px-Uml_classes_en.svg.png)\n\n**Use cases:**\n- scope out small ideas before coding\n- get early feedback of implementation\n\n### Activity Diagram\nUsed to represent process flow\n\n**Structure:**\n- stadia: actions\n- diamonds: decisions\n- bars: start or end of concurrent activities\n- black circle: start of workflow\n- encircled black circle: end of work flow\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Activity_conducting.svg/440px-Activity_conducting.svg.png)\n**Use cases:**\n- showcasing work to non-technical colleagues\n- address / outlines business requirements\n\n### Sequence Diagram\nShows interactions between classes and system\n- typically higher level than class diagrams\n\n**Structure**:\n- Top box: class or object\n- Dashed line (Lifeline symbol): represents passage of time\n- Empty boxes (Activations): represents the time needed for an object to complete a task\n- Solid arrowhead, solid line: synchronous message\n- Lined arrowhead, solid line: asynchronous message\n- Lined arrowhead, dashed line: asynchronous return message / reply message \n- Lined arrowhead, dashed line with \u003c\\\u003ccreate\u003e\u003e symbol: asynchronous return message\n\n![Figure 2. A sequence diagram that has incoming and outgoing messages](https://developer.ibm.com/developer/default/articles/the-sequence-diagram/images/3101_figure2.jpg)\n\n![sequence diagram for an atm system](https://d2slcw3kip6qmk.cloudfront.net/marketing/pages/chart/sequence-diagram-for-ATM-system-UML/sequence_diagram_atm_example-800x1292.png)\n\nSources:\n- https://betterprogramming.pub/a-beginners-guide-to-drawing-technical-diagrams-fb0c97fdbc5e\n- https://creately.com/blog/diagrams/uml-diagram-types-examples/\n\n","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]},"/notes/first-2brain-note":{"title":"first 2brain note","content":"\nHello world! \n\npretty basic huh ?\n\nxD\n","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]},"/notes/second-2brain-note-lol":{"title":"second 2brain note lol","content":"\ntesting hot reload for dev","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]},"/notes/third-2-brain-note-lol":{"title":"third 2 brain note lol","content":"\n:P","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]},"/summary/Atomic-Habits":{"title":"Atomic Habits","content":"From Atomic Habits by James Clear\n## **3 Key Lessons**\n- Small habits\n- Focus on system rather than goals\n- Identity-based habits\n\n## **4 Steps to build better habits**\n1. Cue: make it obvious\n2. Craving: make it attractive\n3. Response: make it easy\n4. Reward: make it satisfying\n\n## **4 Steps to break bad habits**\n1. Cue: make it invisible\n2. Craving: make it unattractive\n3. Response: make it difficult\n4. Reward: make it unsatisfying\n\n## ** How to create a good habit**\n### **1. Cue: Make it obvious**\n- Write down current habits to become aware of them.\n- Use implementation intentions: \"I will [Behavior] at [Time] in [Location]\"\n- Use habit stacking: \"After [Current Habit], I will [New Habit]\"\n- Design your environment. Make the cues of good habits obvious and visible\n\n## 2. Craving: Make it attractive\n- Use temptation bundling. Pair an action you want to do with an action you need to do.\n- Join a culture where your desired behavior is the normal behavior\n- Create a motivation ritual. Do something you enjoy immediately before a difficult habit\n\n## 3. Response: Make it easy\n- Decrease # of steps to start good habit\n- Prepare environment to make habit easier\n- Optimize the small choices needed to make the habit happen\n- Downscale your habits until they can be done in two minutes or less.\n- Automate your habits\n\n## 4. Reward: Make it satisfying\n- Use reinforcement. immediate reward when completing a habit\n- Make \"doing nothing\" enjoyable.\n- Use a habit tracker\n- Never miss twice\n","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]},"/tags/setup":{"title":"setup","content":"","lastmodified":"2023-12-30T03:26:37.055942852Z","tags":[]}}